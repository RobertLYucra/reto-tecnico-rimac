service: rimac-api-appointment
frameworkVersion: '4'

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
  
build:
  esbuild: false
  
custom:
  stage: ${opt:stage, self:provider.stage}
  settings:
    test:
      region: us-east-2
      #apiId: swti23y871
      #apiRootResourceId: osrrozh0c3
      #deployBucket: omnichannel-dev-lambda
      env:
        DB_PORT: ${env:DB_PORT, '3306'}

        PE_DB_HOST: ${env:PE_DB_HOST}
        PE_DB_USERNAME: ${env:PE_DB_USERNAME}
        PE_DB_PASSWORD: ${env:PE_DB_PASSWORD}
        PE_DB_NAME: ${env:PE_DB_NAME}

        CL_DB_HOST: ${env:CL_DB_HOST}
        CL_DB_USERNAME: ${env:CL_DB_USERNAME}
        CL_DB_PASSWORD: ${env:CL_DB_PASSWORD}
        CL_DB_NAME: ${env:CL_DB_NAME}

        APP_REGION: ${env:APP_REGION, 'us-east-2'}
        APPOINTMENT_TABLE_NAME: appointment
        #SNS_TOPIC_ARN: arn:aws:sns:us-east-2:893048189186:appointment-scheduling-topic
        SNS_TOPIC_ARN: !Ref AppointmentTopic

  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    platform: node
    exclude:
      - aws-sdk
    target: node18
    concurrency: 5
    external:
      - '@nestjs/microservices'
      - '@nestjs/websockets'
      - class-transformer
    keepNames: true
    metafile: false
    treeShaking: true
  prune:
    automatic: true
    number: 1
provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 2048
  timeout: 120
  region: ${self:custom.settings.${self:custom.stage}.region}
  iam:
   role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - sns:Publish
            - sqs:GetQueueUrl
            - sqs:SendMessage
            - events:PutEvents
            - sqs:GetQueueUrl
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            
          Resource:
            - arn:aws:sns:${self:provider.region}:${aws:accountId}:appointment-scheduling-topic
            - arn:aws:sns:${self:provider.region}:${aws:accountId}:appointment-scheduling-topic-${self:custom.stage}            
           # - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.APPOINTMENT_TABLE_NAME}
            #- arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.APPOINTMENT_TABLE_NAME}/index/*
            - arn:aws:sqs:${self:provider.region}:${aws:accountId}:rimac-api-appointment-queue-peru
            - arn:aws:sqs:${self:provider.region}:${aws:accountId}:rimac-api-appointment-queue-chile
            - arn:aws:events:${self:provider.region}:${aws:accountId}:event-bus/default
            - !GetAtt AppointmentTable.Arn                  # tabla
            - !Sub '${AppointmentTable.Arn}/index/*'
            - !Ref AppointmentTopic
  #deploymentBucket:
  #  name: ${self:custom.settings.${self:custom.stage}.deployBucket}
  #  serverSideEncryption: AES256
  #apiGateway:
    #restApiId: ${self:custom.settings.${self:custom.stage}.apiId}
    #restApiRootResourceId: ${self:custom.settings.${self:custom.stage}.apiRootResourceId}
  environment: ${self:custom.settings.${self:custom.stage}.env}

functions:
  api:
    handler: dist/serverless.handler
    events:
      - http:
          method: ANY
          path: 'api-appointment/{proxy+}'
          cors: true

  #Logica para ejecutar SQS de Peru o Chile
   
  appointment-topic:
    handler: dist/serverless.appointmentTopic
    events:
      - sns:
          arn:
            Ref: AppointmentTopic
          topicName: appointment-scheduling-topic-${self:custom.stage}
  #Registrar en la base de Datos en Ambiente Peru

  topic-appointment_pe:
    handler: dist/serverless.peruTopicAppointmentHandler
    timeout: 120 
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AppointmentQueuePeru
              - Arn
          batchSize: 3 

  #Registrar en la base de Datos en Ambiente Chile

  topic-appointment_cl:
    handler: dist/serverless.chileTopicAppointmentHandler
    timeout: 120 
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AppointmentQueueChile
              - Arn
          batchSize: 3
  
  #Actualizar estado en DynamoDb
  confirm-appointment:
    handler: dist/serverless.confirmAppointmentHandler
    timeout: 120
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ConfirmTopicAppointmentQueue
              - Arn
          batchSize: 1
  
resources:
  Resources:

  #SNS de Topicos
    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointment-scheduling-topic-${self:custom.stage}

################################################
#           #DynamoDB tabla appointment
################################################
    AppointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.settings.${self:custom.stage}.env.APPOINTMENT_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: appointmentId
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentId
            KeyType: HASH
################################################
#           #SQS Topic Perú
################################################    
    AppointmentQueuePeru:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rimac-api-appointment-queue-peru
        VisibilityTimeout: 130
        MessageRetentionPeriod: 345600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AppointmentDeadLetterQueuePeru.Arn
          maxReceiveCount: 3

    AppointmentDeadLetterQueuePeru:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rimac-api-appointment-queue-peru-v2
        VisibilityTimeout: 130

###############################################
           #SQS Topic Chile
###############################################

    AppointmentQueueChile:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rimac-api-appointment-queue-chile
        VisibilityTimeout: 130
        MessageRetentionPeriod: 345600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AppointmentDeadLetterQueueChile.Arn
          maxReceiveCount: 3

    AppointmentDeadLetterQueueChile:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rimac-api-appointment-queue-chile-dlq
        VisibilityTimeout: 130

###############################################
           #SQS Confirmación de Appointment
###############################################

    ConfirmTopicAppointmentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rimac-api-confirm-appointment-queue
        VisibilityTimeout: 130
        MessageRetentionPeriod: 345600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ConfirmTopicAppointmentDeadLetterQueue.Arn
          maxReceiveCount: 3

    ConfirmTopicAppointmentDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rimac-api-confirm-appointment-queue-dlq
        VisibilityTimeout: 130

#############################################
      # Event Bridge de COnfirmación
###########################################
    EventToAppointmentRule:
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - "appointment.completed"
          detail-type:
            - "AppointmentCompleted"
        Targets:
          - Arn: !GetAtt ConfirmTopicAppointmentQueue.Arn
            Id: "SendToAppointmentQueue"
#############################################
    ###  Permisos para que EventBridge pueda publicar en la cola SQS
###########################################

    AllowEventBridgeToSQS:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref ConfirmTopicAppointmentQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: "sqs:SendMessage"
              Resource: !GetAtt ConfirmTopicAppointmentQueue.Arn